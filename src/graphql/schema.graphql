# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type AdminReportRevenueByMonthResponse {
    sale: String!
    totalOrder: Int!
    totalRevenue: Float!
}

type Category {
    createdAt: Date
    id: Int!
    name: String!
    updatedAt: Date
}

type Customer {
    address: String
    companyName: String
    createdAt: Date
    email: String
    id: Int!
    name: String
    phoneNumber: String!
    updatedAt: Date
}

type CustomerConnection {
    edges: [CustomerEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type CustomerEdge {
    cursor: String!
    node: Customer
}

type DeliverOrder {
    createdAt: Date
    customer: Customer!
    deliveryDate: Date!
    description: String
    driver: User
    id: Int!
    order: Order!
    receivingNote: String
    updatedAt: Date
}

type DeliverOrderConnection {
    edges: [DeliverOrderEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type DeliverOrderEdge {
    cursor: String!
    node: DeliverOrder
}

type ListAllDeliverOrderResponse {
    allOrderCounter: Int!
    createExportOrderCounter: Int!
    deliverOrder: DeliverOrderConnection
    doneOrderCounter: Int!
    inProcessingCounter: Int!
}

type ListAllOrderResponse {
    allOrderCounter: Int!
    creatNewOrderCounter: Int!
    createExportOrderCounter: Int!
    deliveryOrderCounter: Int!
    doneOrderCounter: Int!
    orders: OrderConnection
    paidOrderCounter: Int!
    paymentConfirmationOrderCounter: Int!
    successDeliveryOrderCounter: Int!
    totalCompleted: Float
    totalDeliver: Float
    totalPaid: Float
    totalRevenue: Float
}

type Mutation {
    createCategory(input: CreateCategoryInput!): Category!
    createCustomer(input: CreateCustomerInput!): Customer!
    createDeliverOrder(input: CreateDeliverOrderInput!): DeliverOrder!
    createOrder(input: CreateOrderInput!): Order!
    createPaymentInfo(input: CreatePaymentInfoInput!): SuccessResponse!
    createProduct(input: CreateProductInput!): Product!
    createUser(input: CreateUserInput!): User!
    deleteCustomer(input: DeleteCustomerInput!): SuccessResponse!
    deletePaymentInfo(input: DeletePaymentInfoInput!): SuccessResponse!
    deleteProduct(input: DeleteProductInput!): SuccessResponse!
    deleteUser(input: DeleteUserInput!): SuccessResponse!
    importExcelProduct(input: ImportExcelProductInput!): [Product]!
    updateCategory(input: UpdateCategoryInput!): SuccessResponse!
    updateCustomer(input: UpdateCustomerInput!): SuccessResponse!
    updateDeliverOrder(input: UpdateDeliverOrderInput!): SuccessResponse!
    updateOrder(input: UpdateOrderInput!): SuccessResponse!
    updatePaymentInfo(input: UpdatePaymentInfoInput!): SuccessResponse!
    updateProduct(input: UpdateProductInput!): SuccessResponse!
    updateStatusUserNotification(input: UpdateStatusUserNotificationInput!): SuccessResponse!
    updateUser(input: UpdateUserInput!): SuccessResponse!
}

type Notification {
    content: String!
    createdAt: Date!
    event: NotificationEvent!
    id: Int!
    order: Order
    updatedAt: Date!
}

type NotificationResponse {
    message: String!
    notification: Notification
}

type Order {
    VAT: Float
    createdAt: Date
    customer: Customer!
    deliverAddress: String
    deliverOrderList: [DeliverOrder]
    discount: Float
    freightPrice: Float
    id: Int!
    invoiceNo: String!
    orderItemList: [OrderItem]
    paymentList: [PaymentInfor]
    remainingPaymentMoney: Float
    sale: User!
    status: StatusOrder!
    totalMoney: Float
    updatedAt: Date
}

type OrderConnection {
    edges: [OrderEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type OrderEdge {
    cursor: String!
    node: Order
}

type OrderItem {
    createdAt: Date
    id: Int!
    note: String
    order: Order!
    product: Product!
    quantity: Float
    unitPrice: Float
    updatedAt: Date
    weight: Float
}

type OrderProcess {
    createdAt: Date
    description: String
    fromStatus: String!
    id: Int!
    order: Order!
    toStatus: String!
    updatedAt: Date
    user: User!
}

type PageInfo {
    endCursor: Cursor
    hasNextPage: Boolean!
}

type PaymentInfor {
    createdAt: Date
    customer: Customer!
    description: String
    id: Int!
    money: Float
    order: Order!
    updatedAt: Date
}

type Product {
    age: Int
    category: Category!
    code: String!
    createdAt: Date
    description: String
    height: Float
    id: Int!
    image: String
    inventory: Float
    name: String!
    price: Float!
    quantity: Float
    updatedAt: Date
    weight: Float
    width: Float
}

type ProductConnection {
    edges: [ProductEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type ProductEdge {
    cursor: String!
    node: Product
}

type Query {
    adminReportRevenueByMonth(input: AdminReportRevenueByMonthInput!): [AdminReportRevenueByMonthResponse]!
    getCategoryById(id: Int!): Category!
    getCustomerById(CustomerId: Int!): Customer!
    getOrderById(orderId: Int!): Order!
    getProductById(productId: Int!): Product!
    getUserById(userId: Int!): User!
    listAllCategory: [Category]!
    listAllCustomer(input: ListAllCustomerInput!): CustomerConnection!
    listAllDeliverOrder(input: ListAllDeliverOrderInput!): ListAllDeliverOrderResponse!
    listAllOrder(input: ListAllOrderInput!): ListAllOrderResponse!
    listAllProduct(input: ListAllProductInput!): ProductConnection!
    listArrayUserNotification(input: ListArrayUserNotificationInput!): [UserNotification]!
    listInformationOrder(orderId: Int!): [OrderProcess]!
    login(input: UserLoginInput!): UserLoginResponse!
    me: User!
    salesReportRevenueByMonth(input: SalesReportRevenueByMonthInput!): [SalesReportRevenueByMonthResponse]!
    salesReportRevenueByWeek(input: SalesReportRevenueByWeekInput!): [SalesReportRevenueByWeekResponse]!
    users(input: UsersInput!): UserConnection!
}

type SalesReportRevenueByMonthResponse {
    month: Int!
    totalRevenue: Float!
}

type SalesReportRevenueByWeekResponse {
    date: Date!
    totalRevenue: Float!
}

type Subscription {
    subscribeNotifications(input: SubscribeNotificationsInput!): NotificationResponse!
}

type User {
    address: String
    avatarURL: String
    createdAt: Date
    email: String
    firstName: String!
    fullName: String!
    id: Int!
    isActive: Boolean
    lastName: String!
    phoneNumber: String!
    role: Role
    updatedAt: Date
    userName: String!
}

type UserConnection {
    edges: [UserEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type UserEdge {
    cursor: String!
    node: User
}

type UserLoginResponse {
    token: String!
    user: User!
}

type UserNotification {
    createdAt: Date
    id: Int!
    isRead: Boolean!
    notification: Notification!
    updatedAt: Date
    user: User!
}

enum NotificationEvent {
    Common
    NewDeliverOrder
    NewMessage
    NewOrder
    NewPayment
    UpdateOrder
    UpdatedDeliverOrder
}

enum Role {
    Accountant
    Admin
    Director
    Driver
    Manager
    Sales
}

enum StatusOrder {
    creatNew
    createExportOrder
    delivering
    done
    paid
    paymentConfirmation
    successDelivery
}

enum SuccessResponse {
    success
}

scalar Cursor

scalar Date

scalar JSON

scalar Upload

input AdminReportRevenueByMonthInput {
    endAt: Date!
    startAt: Date!
}

input CreateCategoryInput {
    name: String!
}

input CreateCustomerInput {
    address: String
    companyName: String
    email: String
    name: String
    phoneNumber: String!
}

input CreateDeliverOrderInput {
    createdBy: Int!
    customerId: Int!
    deliveryDate: Date!
    description: String
    driverId: Int
    orderId: Int!
    receivingNote: String
}

input CreateOrderInput {
    VAT: Float
    customerId: Int!
    deliverAddress: String
    discount: Float
    freightPrice: Float
    product: [productInput!]!
    saleId: Int!
}

input CreatePaymentInfoInput {
    createById: Int!
    customerId: Int!
    description: String
    money: Float!
    orderId: Int!
}

input CreateProductInput {
    age: Int
    categoryId: Int!
    code: String!
    description: String
    height: Float
    image: Upload
    inventory: Float
    name: String!
    price: Float!
    quantity: Float
    weight: Float
    width: Float
}

input CreateUserInput {
    address: String
    avatar: Upload
    email: String
    firstName: String!
    lastName: String!
    password: String!
    phoneNumber: String!
    role: Role!
    userName: String!
}

input DeleteCustomerInput {
    ids: [Int!]!
}

input DeletePaymentInfoInput {
    deleteBy: Int!
    ids: [Int!]!
}

input DeleteProductInput {
    ids: [Int!]!
}

input DeleteUserInput {
    ids: [Int!]!
}

input ImportExcelProductInput {
    fileExcelProducts: Upload!
}

input ListAllCustomerInput {
    args: PaginationInput
    searchQuery: String
}

input ListAllDeliverOrderInput {
    args: PaginationInput
    createAt: filterDate
    driverId: Int
    queryString: String
    saleId: Int
    status: String
}

input ListAllOrderInput {
    args: PaginationInput
    createAt: filterDate
    invoiceNo: String
    queryString: String
    saleId: Int
    status: StatusOrder
}

input ListAllProductInput {
    args: PaginationInput
    categoryId: Int
    checkInventory: Boolean
    stringQuery: String
}

input ListArrayUserNotificationInput {
    event: NotificationEvent
    userId: Int!
}

input PaginationInput {
    after: Cursor
    before: Cursor
    first: Int
    last: Int
}

input SalesReportRevenueByMonthInput {
    endAt: Date!
    saleId: Int
    startAt: Date!
}

input SalesReportRevenueByWeekInput {
    endAt: Date!
    saleId: Int
    startAt: Date!
}

input SubscribeNotificationsInput {
    "excludingEvent: Khi user không muốn nhận thông từ 1 sự kiện nào đó"
    excludingEvent: [NotificationEvent!]
    "#### User Id: ID của user sẽ nhận đc các thông báo"
    userId: Int!
}

input UpdateCategoryInput {
    id: Int!
    name: String
}

input UpdateCustomerInput {
    address: String
    companyName: String
    email: String
    id: Int!
    name: String
    phoneNumber: String
}

input UpdateDeliverOrderInput {
    customerId: Int
    deliveryDate: Date
    description: String
    driverId: Int
    id: Int!
    orderId: Int
    receivingNote: String
}

input UpdateOrderInput {
    VAT: Float
    customerId: Int
    deliverAddress: String
    discount: Float
    freightPrice: Float
    id: Int!
    invoiceNo: String
    product: [UpdateProductOrderInput!]
    saleId: Int!
    status: StatusOrder
}

input UpdatePaymentInfoInput {
    customerId: Int
    description: String
    id: Int!
    money: Float
    orderId: Int
    userId: Int!
}

input UpdateProductInput {
    age: Int
    categoryId: Int
    code: String
    description: String
    height: Float
    id: Int!
    image: Upload
    inventory: Float
    name: String
    price: Float
    quantity: Float
    weight: Float
    width: Float
}

input UpdateProductOrderInput {
    description: String
    orderItem: Int
    priceProduct: Float
    productId: Int!
    quantity: Int
}

input UpdateStatusUserNotificationInput {
    isRead: Boolean!
    userNotificationIds: [Int!]!
}

input UpdateUserInput {
    address: String
    avatarURL: Upload
    email: String
    firstName: String
    id: Int!
    isActive: Boolean
    lastName: String
    newPassword: String
    oldPassword: String
    phoneNumber: String
    role: Role
    userName: String
}

input UserLoginInput {
    account: String!
    password: String!
}

input UsersInput {
    args: PaginationInput
    isActive: Boolean
    role: Role
    searchQuery: String
}

input filterDate {
    endAt: Date!
    startAt: Date!
}

input productInput {
    description: String
    priceProduct: Float!
    productId: Int!
    quantity: Int!
}
